name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  create: null

env:
  debianRequirements: "build-essential git zlib1g-dev cmake qt6-tools-dev qt6-tools-dev-tools qt6-l10n-tools qt6-declarative-dev qt6-base-dev libqt6svg6-dev qt6-base-dev-tools qt6-translations-l10n libqt6core5compat6-dev libqt6opengl6-dev libgl1-mesa-dev wget curl devscripts"

jobs:
  main_build:
    name: ${{ matrix.package_suffix }} ${{ matrix.interface }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        qt:
          - 6.8.3
        os:
          - ubuntu-latest
          - ubuntu-24.04-arm
          - macos-latest
          - windows-latest
          - windows-11-arm
        interface:
          - cli
          - gui
        build_type:
          - Release
        include:
        - qt_tools: tools_ninja
          qt_modules: qt5compat
          cmake_cli_arg: 'OFF'
        - os: ubuntu-latest
          package_extension: 'tar.xz'
          package_suffix: 'linux_x64'
          qt_host: linux
          vcpkg_lib_path: vcpkg_installed/x64-linux/lib
          qt_gcc_dir: gcc_64
        - os: ubuntu-24.04-arm
          package_extension: 'tar.xz'
          package_suffix: 'linux_arm64'
          qt_host: linux_arm64
          vcpkg_lib_path: vcpkg_installed/arm64-linux/lib
          qt_gcc_dir: gcc_arm64
        - os: macos-latest
          package_extension: 'dmg'
          package_suffix: 'macos'
          cmake_extra_args: "-DCMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\" -DVCPKG_TARGET_TRIPLET=\"universal-osx\""
          qt_host: mac
        - os: windows-latest
          package_extension: 'zip'
          package_suffix: 'win_x64'
          win_arch: "x64"
          qt_arch: win64_msvc2022_64
          qt_tools: tools_ninja, tools_cmake
          qt_host: windows
        - os: windows-11-arm
          package_extension: 'zip'
          package_suffix: 'win_arm64'
          win_arch: "arm64"
          qt_arch: win64_msvc2022_arm64_cross_compiled
          qt_tools: tools_ninja, tools_cmake
          qt_host: windows
        - interface: gui
          cmake_cli_arg: 'OFF'
          cmake_gui_arg: 'ON'
        - interface: cli
          cmake_cli_arg: 'ON'
          cmake_gui_arg: 'OFF'

    env:
      qt_installation_path: ${{ github.workspace }}
      makoureactor_build_path: ${{ github.workspace }}/../build-makoureactor
      makoureactor_installation_path: ${{ github.workspace }}/../installation-makoureactor
      makoureactor_appbundle_path: ${{ github.workspace }}/../appbundle-makoureactor
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}
      VCPKG_KEEP_ENV_VARS: PATH;QT_HOST_PATH


    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Env Script (Windows)
      uses: ilammy/msvc-dev-cmd@v1
      if: runner.os == 'Windows'
      with:
        arch: ${{ matrix.win_arch }}

    - name: Add universal-osx triplet
      shell: bash
      if: runner.os == 'macOS'
      run: |
        cd ${{ github.workspace }}/vcpkg/triplets
        cp arm64-osx.cmake universal-osx.cmake
        sed -i '' 's|set(VCPKG_OSX_ARCHITECTURES arm64)|set(VCPKG_OSX_ARCHITECTURES "arm64;x86_64")|' universal-osx.cmake

    - name: Setup NuGet.exe
      uses: nuget/setup-nuget@v2
      if: runner.os == 'Linux' || runner.os == 'macOS'
      with:
        nuget-version: latest

    - name: Install Mono (Linux)
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt install mono-runtime
        sudo apt install mono-complete

    - name: Install Mono (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install mono

    - name: Enable vcpkg Github packages registry
      shell: bash
      run: |
        nuget sources add -Name github -Source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json" -Username ${GITHUB_REPOSITORY_OWNER} -Password ${{secrets.GITHUB_TOKEN}} -StorePasswordInClearText
        nuget setApiKey ${{secrets.GITHUB_TOKEN}} -Source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json"
        nuget sources list

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
       dir: ${{ env.qt_installation_path }}
       arch: ${{ matrix.qt_arch }}
       host: ${{ matrix.qt_host }}
       version: ${{ matrix.qt }}
       cache: true
       tools: ${{ matrix.qt_tools }}
       modules: ${{ matrix.qt_modules }}

    - name: Configure env
      shell: bash
      run: |
        QT_MAJOR_VERSION=$(echo "${{ matrix.qt }}" | sed -E 's/^([0-9]+)\..*/\1/')
        echo "$IQTA_TOOLS/Ninja" >> $GITHUB_PATH
        echo "$IQTA_TOOLS/CMake_64/bin" >> $GITHUB_PATH
        echo "QT_MAJOR_VERSION=$QT_MAJOR_VERSION" >> $GITHUB_ENV

    - name: Set prerelease string
      if: github.event.ref_type != 'tag'
      shell: bash
      run: |
        echo "PRERELEASE_STRING= unstable build" >> $GITHUB_ENV

    - name: Download linuxdeployqt (x64)
      if: runner.os == 'Linux' && runner.arch == 'X64'
      run: |
        wget -qc "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
        wget -qc "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
        export VERSION=continuous
        chmod a+x linuxdeploy*.AppImage
        mv linuxdeploy-plugin-qt-*.AppImage $QT_ROOT_DIR/bin/linuxdeploy-plugin-qt
        mv linuxdeploy-*.AppImage $QT_ROOT_DIR/bin/linuxdeploy

    - name: Download linuxdeployqt (ARM64)
      if: runner.os == 'Linux' && runner.arch == 'ARM64'
      run: |
        wget -qc "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-aarch64.AppImage"
        wget -qc "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-aarch64.AppImage"
        export VERSION=continuous
        chmod a+x linuxdeploy*.AppImage
        mv linuxdeploy-plugin-qt-*.AppImage $QT_ROOT_DIR/bin/linuxdeploy-plugin-qt
        mv linuxdeploy-*.AppImage $QT_ROOT_DIR/bin/linuxdeploy

    - name: Build Makou Reactor
      id: main_build
      run: |
        cmake -B ${{ env.makoureactor_build_path }} --preset ${{ env.CMAKE_BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=${{ env.makoureactor_installation_path }} -DCLI:BOOL=${{ matrix.cmake_cli_arg }} -DGUI:BOOL=${{ matrix.cmake_gui_arg }} -DPRERELEASE_STRING="$PRERELEASE_STRING" ${{ matrix.cmake_extra_args }}
        cmake --build ${{ env.makoureactor_build_path }} --target package -j3

    - name: Upload vcpkg build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: vcpkg-logs-${{ matrix.package_suffix }}-${{ matrix.interface }}-${{ matrix.build_type }}
        path: ${{ github.workspace }}/vcpkg/buildtrees/**/*.log

    - name: Build AppImage (Linux)
      if: runner.os == 'Linux' && matrix.interface == 'gui'
      run: |
        sudo add-apt-repository -y universe
        sudo apt install -y libfuse2 libxkbcommon-x11-0 libxcb-cursor0
        cmake --build ${{ env.makoureactor_build_path }} --target install -j3
        mkdir -p ${{env.makoureactor_appbundle_path}}/usr/share/makoureactor/translations
        cp ${{env.makoureactor_installation_path}}/share/makoureactor/translations/*.qm ${{env.makoureactor_appbundle_path}}/usr/share/makoureactor/translations
        mkdir -p ${{env.makoureactor_appbundle_path}}/usr/plugins/iconengines
        cp ${{ env.qt_installation_path }}/Qt/${{ matrix.qt }}/${{ matrix.qt_gcc_dir }}/plugins/iconengines/libqsvgicon.so ${{env.makoureactor_appbundle_path}}/usr/plugins/iconengines/libqsvgicon.so

        export VERSION=continuous
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${{ env.makoureactor_build_path }}/${{ matrix.vcpkg_lib_path }}
        export PATH=$PATH:${{ env.qt_installation_path }}/Qt/${{ matrix.qt }}/${{ matrix.qt_gcc_dir }}/libexec
        linuxdeploy --appdir="${{ env.makoureactor_appbundle_path }}" --plugin=qt --output appimage \
          -e "${{ env.makoureactor_installation_path }}"/bin/Makou_Reactor \
          -d "${{ env.makoureactor_installation_path }}"/share/applications/io.github.myst6re.makoureactor.desktop \
          -i "${{ env.makoureactor_installation_path }}"/share/icons/hicolor/256x256/apps/io.github.myst6re.makoureactor.png
        mv *.AppImage makoureactor-continuous-${{ matrix.interface }}-${{ matrix.package_suffix }}.AppImage

    - name: Prepare Upload
      shell: bash
      run: mv ../build-makoureactor/*.${{ matrix.package_extension }} makoureactor-continuous-${{ matrix.interface }}-${{ matrix.package_suffix }}.${{ matrix.package_extension }}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: artifact-${{ matrix.package_suffix }}-${{ matrix.interface }}
        path: ${{ github.workspace }}/makoureactor-continuous-*.*

  deb_builder:
    name: debianBuilder-${{matrix.config.name}}-${{matrix.config.arch}}
    runs-on: ${{matrix.config.os}}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
             name: noble , os: ubuntu-24.04
             , arch: x86_64
          }
        - {
             name: noble , os: ubuntu-24.04-arm
             , arch: aarch64
          }
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup NuGet.exe
      uses: nuget/setup-nuget@v2
      if: runner.os == 'Linux'
      with:
        nuget-version: latest

    - name: Install Mono
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt install mono-runtime
        sudo apt install mono-complete

    - name: Enable vcpkg Github packages registry
      shell: bash
      run: |
        nuget sources add -Name github -Source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json" -Username ${GITHUB_REPOSITORY_OWNER} -Password ${{secrets.GITHUB_TOKEN}} -StorePasswordInClearText
        nuget setApiKey ${{secrets.GITHUB_TOKEN}} -Source "https://nuget.pkg.github.com/${GITHUB_REPOSITORY_OWNER}/index.json"
        nuget sources list

    - name: Install Dependencies
      run: |
        sudo apt-get update -y > /dev/null
        sudo apt-get install -qqq ${{env.debianRequirements}} > /dev/null
        curl -s https://api.github.com/repos/sithlord48/ff7tk/releases/latest | awk -F\" '/browser_download_url.*${{matrix.config.name}}-${{matrix.config.arch}}*[.deb]/{print $(NF-1)}' | wget -i -
        sudo apt -y -qqq install ./libff7tk*.deb
        rm libff7tk*.deb

    - name: Build
      run: |
        cmake -S. -Bbuild --preset=Release -DCMAKE_INSTALL_PREFIX=/usr -DCPACK_DEBIAN_PACKAGE_RELEASE=${{github.run_attempt}}~${{matrix.config.name}}
        cmake --build build
        cpack -G DEB -C Release --config build/CPackConfig.cmake

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: debian-artifacts-${{ matrix.config.name }}-${{matrix.config.arch}}
        path: makoureactor*.deb

  pre_release_assets:
    name: Pre-Release
    needs: [main_build, deb_builder]
    if: (github.event.ref_type != 'tag') && (github.ref == 'refs/heads/master')
    concurrency: pre-release-${{ github.ref }}
    runs-on: ubuntu-latest
    steps:
    - name: Download Files
      uses: actions/download-artifact@v4

    - name: Deploy Package
      uses: crowbarmaster/GH-Automatic-Releases@latest
      with:
       repo_token: "${{ secrets.GITHUB_TOKEN }}"
       automatic_release_tag: "continuous"
       prerelease: true
       title: "Unstable Build"
       files: |
         artifact-*/*
         debian-artifacts-*/*

  release_assets:
    name: Release
    needs: [main_build, deb_builder]
    if: github.event.ref_type == 'tag'
    concurrency: release-${{ github.ref }}
    runs-on: ubuntu-latest
    steps:
    - name: Download Files
      uses: actions/download-artifact@v4

    - name: Prepare Upload
      shell: bash
      run: find . -type f -name 'makoureactor-continuous-*' -exec bash -c 'mv "{}" $(echo {} | sed 's/continuous-//')' ';'

    - name: Deploy Package
      uses: crowbarmaster/GH-Automatic-Releases@latest
      with:
       repo_token: "${{ secrets.GITHUB_TOKEN }}"
       prerelease: false
       title: ${{ github.event.ref }}
       files: |
         artifact-*/*
         debian-artifacts-*/*

